name: Auto Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.cs'
      - '**.xaml'
      - 'README.md'
      - 'CONTRIBUTING.md'
  pull_request:
    branches: [ main, develop ]

jobs:
  docs-auto:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Generate API documentation
      run: |
        dotnet tool install -g dotnet-doc
        dotnet doc ReturnToMoriaServerManager.sln --output ./docs/api
        
    - name: Generate project documentation
      run: |
        # Create project overview
        $overview = @"
        # Return to Moria Server Manager - Documentation
        
        ## Project Overview
        
        This project provides a comprehensive server management solution for Return to Moria dedicated servers.
        
        ## Architecture
        
        ### Models
        - ServerConfiguration: Main server configuration model
        - ServerStatus: Server status information
        - ServerIniConfiguration: INI file configuration model
        
        ### Services
        - IServerManagerService: Main server management interface
        - IServerStatusService: Server status monitoring
        - IConfigurationService: Configuration management
        - ISteamCmdService: SteamCMD integration
        
        ### ViewModels
        - MainViewModel: Main application view model
        - ServerConfigViewModel: Server configuration view model
        - ServerInfosViewModel: Server information view model
        
        ### Views
        - MainWindow: Main application window
        - ServerConfigPage: Server configuration page
        - ServerInfosPage: Server information page
        
        ## Usage Examples
        
        ### Basic Server Setup
        ```csharp
        var serverManager = serviceProvider.GetService<IServerManagerService>();
        await serverManager.InstallServerAsync();
        ```
        
        ### Configuration Management
        ```csharp
        var configService = serviceProvider.GetService<IConfigurationService>();
        var config = await configService.LoadConfigurationAsync();
        ```
        
        ## Development Guidelines
        
        See CONTRIBUTING.md for detailed development guidelines.
        "@
        
        $overview | Out-File -FilePath "./docs/README.md" -Encoding UTF8
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: Documentation
        path: ./docs/
        retention-days: 30
        
    - name: Create documentation issue
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸ“š Documentation Update Available',
            body: `Documentation has been updated for commit ${context.sha}.
            
            ### Changes
            - Updated API documentation
            - Updated project overview
            - Updated usage examples
            
            ### Next Steps
            - Review the generated documentation
            - Update external documentation if needed
            - Share with the community`,
            labels: ['documentation', 'automated']
          }); 