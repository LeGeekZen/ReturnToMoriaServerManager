name: Build and Upload Release Assets

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore ReturnToMoriaServerManager.sln
      
    - name: Build
      run: dotnet build ReturnToMoriaServerManager.sln --no-restore --configuration Release
      
    - name: Publish
      run: dotnet publish ReturnToMoriaServerManager/ReturnToMoriaServerManager.csproj --configuration Release --output ./publish --self-contained false
      
    - name: Create Release Package
      run: |
        $version = "${{ github.ref_name }}"
        $packageName = "ReturnToMoriaServerManager-$version.zip"
        
        # Create a clean release package
        New-Item -ItemType Directory -Path "./release-package" -Force
        Copy-Item -Path "./publish/*" -Destination "./release-package/" -Recurse
        
        # Add README and LICENSE to the package
        Copy-Item -Path "./README.md" -Destination "./release-package/"
        Copy-Item -Path "./LICENSE" -Destination "./release-package/"
        
        # Create the ZIP package
        Compress-Archive -Path "./release-package/*" -DestinationPath "./$packageName" -Force
        
    - name: Upload Release Assets
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const tagName = context.ref.replace('refs/tags/', '');
          const assetPath = path.join(process.env.GITHUB_WORKSPACE, `ReturnToMoriaServerManager-${tagName}.zip`);
          
          if (fs.existsSync(assetPath)) {
            // Get the release for this tag
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const release = releases.data.find(r => r.tag_name === tagName);
            
            if (release) {
              console.log(`Uploading asset to existing release: ${release.name}`);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                name: `ReturnToMoriaServerManager-${tagName}.zip`,
                data: fs.readFileSync(assetPath)
              });
            } else {
              console.log(`No release found for tag: ${tagName}`);
            }
          } else {
            console.log(`Asset file not found: ${assetPath}`);
          } 