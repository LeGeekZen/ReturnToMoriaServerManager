name: Project Monitoring

on:
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check repository health
      uses: actions/github-script@v7
      with:
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 100
          });
          
          const pullRequests = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 100
          });
          
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 10
          });
          
          console.log(`Repository Health Report:`);
          console.log(`- Open Issues: ${issues.data.length}`);
          console.log(`- Open Pull Requests: ${pullRequests.data.length}`);
          console.log(`- Total Releases: ${releases.data.length}`);
          
          // Check for stale issues
          const staleIssues = issues.data.filter(issue => {
            const updatedAt = new Date(issue.updated_at);
            const cutoff = new Date();
            cutoff.setDate(cutoff.getDate() - 30); // 30 days
            return updatedAt < cutoff;
          });
          
          if (staleIssues.length > 0) {
            console.log(`- Stale Issues (>30 days): ${staleIssues.length}`);
          }
          
    - name: Generate weekly report
      uses: actions/github-script@v7
      with:
        script: |
          const report = `# Weekly Project Report
          
          Generated on: ${new Date().toISOString()}
          
          ## Repository Statistics
          - Total Issues: ${(await github.rest.issues.listForRepo({owner: context.repo.owner, repo: context.repo.repo, state: 'all', per_page: 1})).data.length}
          - Open Issues: ${(await github.rest.issues.listForRepo({owner: context.repo.owner, repo: context.repo.repo, state: 'open', per_page: 1})).data.length}
          - Open Pull Requests: ${(await github.rest.pulls.list({owner: context.repo.owner, repo: context.repo.repo, state: 'open', per_page: 1})).data.length}
          - Total Releases: ${(await github.rest.repos.listReleases({owner: context.repo.owner, repo: context.repo.repo, per_page: 1})).data.length}
          
          ## Recent Activity
          - Last commit: ${(await github.rest.repos.listCommits({owner: context.repo.owner, repo: context.repo.repo, per_page: 1})).data[0]?.commit.message || 'No commits found'}
          
          ## Recommendations
          - Review stale issues and pull requests
          - Update dependencies if needed
          - Plan next release
          `;
          
          console.log(report); 